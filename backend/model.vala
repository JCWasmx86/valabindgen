namespace ValaBindGen {
	internal class Model {
		// Function pointer
		internal Gee.List<ModelDelegate> model_delegates { get; set; default = new Gee.ArrayList<ModelDelegate> (); }

		// Produced by e.g. function pointers without typedefs
		internal Gee.List<ModelDelegate> artificial_delegates { get; set; default = new Gee.ArrayList<ModelDelegate> (); }

		internal Gee.List<ModelEnum> enums { get; set; default = new Gee.ArrayList<ModelEnum> (); }

		internal Gee.List<ModelFunction> functions { get; set; default = new Gee.ArrayList<ModelFunction> (); }

		internal Gee.List<ModelStruct> structs { get; set; default = new Gee.ArrayList<ModelStruct> (); }

		internal void generate (Configuration config) {
			this.filter_unused_functions (config);
			this.filter_unused_data ();
			this.merge ();
			var sb = new StringBuilder ();
			sb.append ("// Autogenerated VAPI-File (").append (config.reproducable ? "<REPROD>" : new GLib.DateTime.now_local ().format ("%c")).append (")\n");
			sb.append ("namespace ").append (config.@namespace).append (" {\n");
			var f_names = new Gee.ArrayList<string>();
			foreach (var f in this.functions) {
				f_names.add (f.name);
			}
			foreach (var e in this.enums) {
				sb.append (e.generate ()).append ("\n");
			}
			var prefix = Utils.common_prefix (f_names);
			foreach (var f in this.functions) {
				sb.append (f.generate (prefix.length)).append ("\n");
			}
			sb.append ("}\n");
			stderr.printf ("%s\n", sb.str);
		}

		void filter_unused_data () {
		}

		void filter_unused_functions (Configuration config) {
			var new_list = new Gee.ArrayList<ModelFunction>();
			for (var i = 0; i < this.functions.size; i++) {
				var fn = this.functions[i];
				var matches = false;
				foreach (var s in config.functions) {
					matches |= (fn.name == s || Regex.match_simple (s, fn.name));
				}
				if (!matches) {
					info ("Ignoring %s as it does not match", fn.name);
					continue;
				}
				new_list.add (fn);
			}
			this.functions = new_list;
		}

		void merge () {
		}
	}
}
